# Generated by Django 5.0.1 on 2024-04-09 08:03

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("product", "0012_alter_stock_sku_alter_stock_variant"),
    ]
    stock_balance_sql_v2 = """
    CREATE OR REPLACE VIEW stock_balance AS
        WITH stock_st AS
            (
                SELECT DISTINCT ON(stock_id) 
                    created,
                    stock_id,
                    method,
                    product_stockstatement."Closing_wt",
                    product_stockstatement."Closing_qty"
                FROM product_stockstatement
                ORDER BY stock_id ,created DESC
            )
        SELECT
            product_stock.id AS stock_id,
            product_stock.created,
            reorder_level,
            variant_id,
            stock_st.method AS statement_method,
            stock_st.created AS statement_created,
            COALESCE(stock_st."Closing_wt",0.0) AS Closing_wt,COALESCE(stock_st."Closing_qty",0) AS Closing_qty,

            (SELECT COALESCE(SUM(product_stocktransaction.quantity), 0::bigint) AS sum
            FROM product_stocktransaction
            INNER JOIN product_movement ON product_stocktransaction.movement_type_id = product_movement.id
            WHERE
                product_stocktransaction.stock_id = product_stock.id
                AND ((stock_st.created ISNULL) OR product_stocktransaction.created >= stock_st.created OR 1>0)
                AND (product_movement.direction = '+')) AS in_qty,

            (SELECT COALESCE(SUM(product_stocktransaction.quantity), 0::bigint) AS sum
            FROM product_stocktransaction
            INNER JOIN product_movement ON product_stocktransaction.movement_type_id = product_movement.id
            WHERE
                product_stocktransaction.stock_id = product_stock.id
                AND ((stock_st.created ISNULL) OR product_stocktransaction.created >= stock_st.created OR 1>0)
                AND (product_movement.direction = '-')) AS out_qty,

            (SELECT COALESCE(SUM(product_stocktransaction.weight), 0.0) AS sum
            FROM product_stocktransaction
            INNER JOIN product_movement ON product_stocktransaction.movement_type_id = product_movement.id
            WHERE
                product_stocktransaction.stock_id = product_stock.id
                AND ((stock_st.created ISNULL) OR product_stocktransaction.created >= stock_st.created)
                AND (product_movement.direction = '+')) AS in_wt,

            (SELECT COALESCE(SUM(product_stocktransaction.weight), 0.0) AS sum
            FROM product_stocktransaction
            INNER JOIN product_movement ON product_stocktransaction.movement_type_id = product_movement.id
            WHERE product_stocktransaction.stock_id = product_stock.id
                AND ((stock_st.created ISNULL) OR product_stocktransaction.created >= stock_st.created)
                AND (product_movement.direction = '-')) AS out_wt

        FROM product_stock
        LEFT JOIN stock_st
        ON product_stock.id = stock_st.stock_id
        ORDER BY product_stock.id;"""

    # this will generate an error because stoct_st is generated from WITH clause and it is not available in the main query
    stock_balance_sql_v3 = """
    
    CREATE OR REPLACE VIEW stock_balance AS
        WITH stock_st AS
            (
                SELECT DISTINCT ON(stock_id) 
                    created,
                    stock_id,
                    method,
                    product_stockstatement."Closing_wt",
                    product_stockstatement."Closing_qty"
                FROM product_stockstatement
                ORDER BY stock_id ,created DESC
            ),
        transaction_sums AS
            (
                SELECT 
                    product_stocktransaction.stock_id,
                    COALESCE(SUM(CASE WHEN product_movement.direction = '+' THEN product_stocktransaction.quantity ELSE 0 END), 0::bigint) AS in_qty,
                    COALESCE(SUM(CASE WHEN product_movement.direction = '-' THEN product_stocktransaction.quantity ELSE 0 END), 0::bigint) AS out_qty,
                    COALESCE(SUM(CASE WHEN product_movement.direction = '+' THEN product_stocktransaction.weight ELSE 0.0 END), 0.0) AS in_wt,
                    COALESCE(SUM(CASE WHEN product_movement.direction = '-' THEN product_stocktransaction.weight ELSE 0.0 END), 0.0) AS out_wt
                FROM product_stocktransaction
                INNER JOIN product_movement ON product_stocktransaction.movement_type_id = product_movement.id
                WHERE ((stock_st.created ISNULL) OR product_stocktransaction.created >= stock_st.created)
                GROUP BY product_stocktransaction.stock_id
            )
        SELECT
            product_stock.id AS stock_id,
            product_stock.created,
            reorder_level,
            variant_id,
            stock_st.method AS statement_method,
            stock_st.created AS statement_created,
            COALESCE(stock_st."Closing_wt",0.0) AS opening_wt,
            COALESCE(stock_st."Closing_qty",0) AS opening_qty,
            transaction_sums.in_qty,
            transaction_sums.out_qty,
            transaction_sums.in_wt,
            transaction_sums.out_wt,
            (COALESCE(stock_st."Closing_qty",0) + transaction_sums.in_qty - transaction_sums.out_qty) AS bal_qty,
            (COALESCE(stock_st."Closing_wt",0.0) + transaction_sums.in_wt - transaction_sums.out_wt) AS bal_wt
        FROM product_stock
        LEFT JOIN stock_st ON product_stock.id = stock_st.stock_id
        LEFT JOIN transaction_sums ON product_stock.id = transaction_sums.stock_id
        ORDER BY product_stock.id;
    """
    operations = [
        migrations.RunSQL(
            stock_balance_sql_v2, reverse_sql="DROP VIEW IF EXISTS stock_balance;"
        ),
    ]
