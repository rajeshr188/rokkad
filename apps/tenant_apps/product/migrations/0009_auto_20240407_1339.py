# Generated by Django 5.0.1 on 2024-04-07 08:09

from django.db import migrations
from django.db.migrations.operations.base import Operation


class CreateView(Operation):
    reversible = True

    def __init__(self, name, sql):
        self.name = name
        self.sql = sql

    def state_forwards(self, app_label, state):
        pass

    # def database_forwards(self, app_label, schema_editor, from_state, to_state):
    #     schema_editor.execute(f"CREATE VIEW {self.name} AS {self.sql}")

    # def database_backwards(self, app_label, schema_editor, from_state, to_state):
    #     schema_editor.execute(f"DROP VIEW IF EXISTS {self.name};")

    # to make the operation tenants aware
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        TenantModel = get_tenant_model()
        for tenant in TenantModel.objects.all():
            with connection.cursor() as cursor:
                connection.set_schema(tenant.schema_name)
                cursor.execute(f"CREATE VIEW {self.name} AS {self.sql}")

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        TenantModel = get_tenant_model()
        for tenant in TenantModel.objects.all():
            with connection.cursor() as cursor:
                connection.set_schema(tenant.schema_name)
                cursor.execute(f"DROP VIEW IF EXISTS {self.name};")

    def describe(self):
        return "Creates VIEW %s" % self.name

    @property
    def migration_name_fragment(self):
        return "create_view_%s" % self.name


class Migration(migrations.Migration):
    dependencies = [
        ("product", "0008_alter_stock_purchase_item"),
    ]
    stock_balance_sql_v1 = """
    Create or replace view stock_balance as
        WITH stock_st AS
            (	
                select distinct on(stock_id) * 
                from product_stockstatement
                order by stock_id ,created desc
            )
        SELECT 
            product_stock.id as stock_id,product_stock.created,
            reorder_level,
            variant_id,stock_st.method as statement_method,
            stock_st.created as statement_created,
            Coalesce(stock_st."Closing_wt",0.0)as Closing_wt,Coalesce(stock_st."Closing_qty",0) as Closing_qty,
            Coalesce(stock_st.total_wt_in,0.0)as total_wt_in,Coalesce(stock_st.total_wt_out,0.0) as total_wt_out,
            Coalesce(stock_st.total_qty_in,0)as total_qty_in,Coalesce(stock_st.total_qty_out,0)as total_qty_out,   
		
            ( SELECT COALESCE(sum(product_stocktransaction.quantity), 0::bigint) AS sum
            FROM product_stocktransaction
            WHERE 
                product_stocktransaction.stock_id = product_stock.id 
                AND ((stock_st.created isnull) or product_stocktransaction.created >= stock_st.created or 1>0)
                AND (product_stocktransaction.movement_type_id::text = ANY (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS in_qty,
            
            ( SELECT COALESCE(sum(product_stocktransaction.quantity), 0::bigint) AS sum
            FROM product_stocktransaction
            WHERE 
            product_stocktransaction.stock_id = product_stock.id 
                AND ((stock_st.created isnull) or product_stocktransaction.created >= stock_st.created or 1>0)
                AND (product_stocktransaction.movement_type_id::text <> ALL (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS out_qty,
            
            ( SELECT COALESCE(sum(product_stocktransaction.weight), 0.0) AS sum
            FROM product_stocktransaction
            WHERE 
            product_stocktransaction.stock_id = product_stock.id 
                AND ((stock_st.created isnull) or product_stocktransaction.created >= stock_st.created ) 
                AND (product_stocktransaction.movement_type_id::text = ANY (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS in_wt,
            
            ( SELECT COALESCE(sum(product_stocktransaction.weight), 0.0) AS sum
            FROM product_stocktransaction
            WHERE product_stocktransaction.stock_id = product_stock.id 
                AND ((stock_st.created isnull) or product_stocktransaction.created >= stock_st.created) 
                AND (product_stocktransaction.movement_type_id::text <> ALL (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS out_wt
            
        FROM product_stock
        LEFT JOIN stock_st
        ON product_stock.id = stock_st.stock_id
        ORDER BY product_stock.id;
        """

    operations = [
        # migrations.RunSQL(stock_balance_sql_v1, reverse_sql="DROP VIEW IF EXISTS stock_balance;"),
    ]
